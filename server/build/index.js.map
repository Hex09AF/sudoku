{
  "version": 3,
  "sources": ["<stdin>", "../../app/entry.server.tsx", "../../app/root.tsx", "../../app/comps/Rubik/index.tsx", "../../app/context.tsx", "../../app/utils/room.server.ts", "../../app/const/board.ts", "../../app/helper/random.ts", "../../app/utils/db.server.ts", "../../app/routes/solo/$roomId.tsx", "../../app/comps/BoardGame/index.tsx", "../../app/machine/game.ts", "../../app/utils/game.ts", "../../app/comps/Score/index.tsx", "../../app/helper/hash.ts", "../../app/comps/Score/point.tsx", "../../app/comps/BoardGame/Cell.tsx", "../../app/comps/BoardGame/CountDown.tsx", "../../app/hooks/useCountDown.ts", "../../app/helper/merge.ts", "../../app/helper/solve.ts", "../../app/utils/session.server.ts", "../../app/routes/__index.tsx", "../../app/comps/BoardGame/BotPlay.tsx", "../../app/comps/Header/index.tsx", "../../app/comps/UsersOnline/UsersOnline.tsx", "../../app/routes/__index/index.tsx", "../../app/assets/svg/LookUp.tsx", "../../app/routes/logout.tsx", "../../app/routes/login.tsx", "../../app/utils/request.server.ts", "server-assets-manifest:@remix-run/dev/assets-manifest", "server-entry-module:@remix-run/dev/server-build"],
  "sourcesContent": ["export * from \"@remix-run/dev/server-build\";", "import { PassThrough } from \"stream\";\nimport type { EntryContext } from \"@remix-run/node\";\nimport { Response } from \"@remix-run/node\";\nimport { RemixServer } from \"@remix-run/react\";\nimport isbot from \"isbot\";\nimport { renderToPipeableStream } from \"react-dom/server\";\n\nconst ABORT_DELAY = 5000;\n\nexport default function handleRequest(\n  request: Request,\n  responseStatusCode: number,\n  responseHeaders: Headers,\n  remixContext: EntryContext\n) {\n  return isbot(request.headers.get(\"user-agent\"))\n    ? handleBotRequest(\n        request,\n        responseStatusCode,\n        responseHeaders,\n        remixContext\n      )\n    : handleBrowserRequest(\n        request,\n        responseStatusCode,\n        responseHeaders,\n        remixContext\n      );\n}\n\nfunction handleBotRequest(\n  request: Request,\n  responseStatusCode: number,\n  responseHeaders: Headers,\n  remixContext: EntryContext\n) {\n  return new Promise((resolve, reject) => {\n    let didError = false;\n\n    const { pipe, abort } = renderToPipeableStream(\n      <RemixServer context={remixContext} url={request.url} />,\n      {\n        onAllReady() {\n          const body = new PassThrough();\n\n          responseHeaders.set(\"Content-Type\", \"text/html\");\n\n          resolve(\n            new Response(body, {\n              headers: responseHeaders,\n              status: didError ? 500 : responseStatusCode,\n            })\n          );\n\n          pipe(body);\n        },\n        onShellError(error: unknown) {\n          reject(error);\n        },\n        onError(error: unknown) {\n          didError = true;\n\n          console.error(error);\n        },\n      }\n    );\n\n    setTimeout(abort, ABORT_DELAY);\n  });\n}\n\nfunction handleBrowserRequest(\n  request: Request,\n  responseStatusCode: number,\n  responseHeaders: Headers,\n  remixContext: EntryContext\n) {\n  return new Promise((resolve, reject) => {\n    let didError = false;\n\n    const { pipe, abort } = renderToPipeableStream(\n      <RemixServer context={remixContext} url={request.url} />,\n      {\n        onShellReady() {\n          const body = new PassThrough();\n\n          responseHeaders.set(\"Content-Type\", \"text/html\");\n\n          resolve(\n            new Response(body, {\n              headers: responseHeaders,\n              status: didError ? 500 : responseStatusCode,\n            })\n          );\n\n          pipe(body);\n        },\n        onShellError(err: unknown) {\n          reject(err);\n        },\n        onError(error: unknown) {\n          didError = true;\n\n          console.error(error);\n        },\n      }\n    );\n\n    setTimeout(abort, ABORT_DELAY);\n  });\n}\n", "import type { ActionArgs, LinksFunction, MetaFunction } from \"@remix-run/node\";\nimport {\n  Links,\n  LiveReload,\n  Meta,\n  Outlet,\n  Scripts,\n  ScrollRestoration,\n  useCatch,\n} from \"@remix-run/react\";\nimport { useEffect, useState } from \"react\";\nimport type { Socket } from \"socket.io-client\";\nimport io from \"socket.io-client\";\nimport globalStyles from \"~/styles/global.css\";\nimport headerStyles from \"~/styles/header/header.css\";\nimport indexStyles from \"~/styles/index.css\";\nimport Rubik from \"./comps/Rubik\";\nimport { SocketProvider } from \"./context\";\nimport { createRoom } from \"./utils/room.server\";\nimport favicon from \"~/assets/favicon/apple-touch-icon.png\";\nimport favicon16 from \"~/assets/favicon/favicon-16x16.png\";\nimport favicon32 from \"~/assets/favicon/favicon-32x32.png\";\nimport faviconManifest from \"~/assets/favicon/site.webmanifest\";\n\nexport const meta: MetaFunction = () => ({\n  charset: \"utf-8\",\n  title: \"Competitive sudoku\",\n  viewport: \"width=device-width,initial-scale=1\",\n});\n\nexport const links: LinksFunction = () => {\n  return [\n    { rel: \"stylesheet\", href: globalStyles },\n    { rel: \"stylesheet\", href: headerStyles },\n    { rel: \"stylesheet\", href: indexStyles },\n    {\n      rel: \"apple-touch-icon\",\n      sizes: \"180x180\",\n      href: favicon,\n    },\n    {\n      rel: \"icon\",\n      type: \"image/png\",\n      sizes: \"32x32\",\n      href: favicon32,\n    },\n    {\n      rel: \"icon\",\n      type: \"image/png\",\n      sizes: \"16x16\",\n      href: favicon16,\n    },\n    { rel: \"manifest\", href: faviconManifest },\n  ];\n};\n\nexport const action = async ({ request }: ActionArgs) => {\n  return createRoom();\n};\n\nexport function CatchBoundary() {\n  const caught = useCatch();\n  return (\n    <html>\n      <head>\n        <title>Oops!</title>\n        <Meta />\n        <Links />\n      </head>\n      <body>\n        {caught.status == 404 ? (\n          <Rubik />\n        ) : (\n          <div>\n            Something went wrong: {caught.status} {caught.statusText}\n          </div>\n        )}\n        <Scripts />\n      </body>\n    </html>\n  );\n}\n\nexport default function App() {\n  const [socket, setSocket] = useState<Socket>();\n\n  useEffect(() => {\n    const socket = io();\n    setSocket(socket);\n    return () => {\n      socket.close();\n    };\n  }, []);\n\n  return (\n    <html lang=\"en\">\n      <head>\n        <Meta />\n        <Links />\n      </head>\n      <body>\n        <SocketProvider socket={socket}>\n          <Outlet />\n        </SocketProvider>\n        <ScrollRestoration />\n        <Scripts />\n        <LiveReload />\n      </body>\n    </html>\n  );\n}\n", "import { useEffect, useRef } from \"react\";\n\nconst colors = [\"\", \"orange\", \"yellow\", \"green\", \"blue\", \"indigo\", \"violet\"];\n\nexport default function Rubik() {\n  const rubik = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    if (rubik.current && window) {\n      const fn = (e: MouseEvent) => {\n        // normalise touch/mouse\n        e.preventDefault();\n        let pos = [e.clientX, e.clientY];\n        const h = window.innerHeight;\n        const w = window.innerWidth;\n        const ratioY = 60 / w;\n        const ratioX = 60 / h;\n        const rotY = pos[0] * ratioY - 30;\n        const rotX = pos[1] * ratioX - 30;\n        const transform = `\n        transition: transform 0.5s ease-out;\n        transform: translate3d(0px, 0px, 0px) scale3d(1, 1, 1) rotateZ(0deg) skew(0deg, 0deg)\n          rotateX(${-rotX}deg)\n          rotateY(${rotY}deg)\n        `;\n        if (rubik.current) {\n          rubik.current.setAttribute(\"style\", transform);\n        }\n      };\n\n      const fnMouseOut = () => {\n        if (rubik.current) {\n          rubik.current.setAttribute(\"style\", \"\");\n        }\n      };\n\n      window.addEventListener(\"mousemove\", fn);\n      window.addEventListener(\"mouseout\", fnMouseOut);\n      return () => {\n        window.removeEventListener(\"mousemove\", fn);\n        window.removeEventListener(\"mouseout\", fnMouseOut);\n      };\n    }\n  }, [rubik]);\n\n  return (\n    <div className=\"rubik-wrapper\">\n      <div className=\"rubik-layout\" ref={rubik}>\n        {Array(49)\n          .fill(0)\n          .map((_, idx) => {\n            return (\n              <div key={idx} className=\"rubik-cell\">\n                {colors.map((v) => (\n                  <div key={v} className={`rubik-cell-color ${v}`}></div>\n                ))}\n              </div>\n            );\n          })}\n      </div>\n    </div>\n  );\n}\n", "import type { ReactNode } from \"react\";\nimport { createContext, useContext } from \"react\";\nimport type { Socket } from \"socket.io-client\";\n\ntype ProviderProps = {\n  socket: Socket | undefined;\n  children: ReactNode;\n};\n\nconst context = createContext<Socket | undefined>(undefined);\n\nexport function useSocket() {\n  return useContext(context);\n}\n\nexport function SocketProvider({ socket, children }: ProviderProps) {\n  return <context.Provider value={socket}>{children}</context.Provider>;\n}\n", "import { redirect } from \"@remix-run/node\";\nimport RANDOMBOARD from \"~/helper/random\";\nimport { db } from \"./db.server\";\n\nexport async function createRoom() {\n  const board = JSON.stringify(await RANDOMBOARD());\n  const room = await db.room.create({\n    data: { board },\n  });\n  return redirect(`/solo/${room.id}`);\n}\n\nexport async function getRooms() {\n  const rooms = await db.room.findMany({\n    take: 10,\n    orderBy: {\n      createdAt: \"desc\",\n    },\n    include: {\n      users: true,\n    },\n  });\n\n  return rooms;\n}\n\nexport async function getRoom(id: string) {\n  const room = await db.room.findUnique({\n    where: { id },\n    select: { id: true, board: true, gameStatus: true },\n  });\n  return room;\n}\n\nexport async function getMoves({ roomId }: { roomId: string }) {\n  try {\n    const moves = await db.usersOnRooms.findMany({\n      where: {\n        roomId,\n      },\n      select: { moves: true, userId: true, score: true, role: true },\n    });\n    return moves;\n  } catch {}\n}\n\nexport async function updateMoves({\n  roomId,\n  userId,\n  moves,\n  score,\n}: {\n  roomId: string;\n  userId: string;\n  moves: string; // JSON.stringify\n  score: number;\n}) {\n  try {\n    await db.usersOnRooms.update({\n      data: {\n        moves,\n        score,\n      },\n      where: {\n        userId_roomId: {\n          userId,\n          roomId,\n        },\n      },\n    });\n  } catch {}\n}\n\nexport async function updateGameStatus({\n  gameStatus,\n  id,\n  readyUsers,\n}: {\n  gameStatus: string;\n  id: string;\n  readyUsers: string[];\n}) {\n  try {\n    await db.room.update({\n      data: {\n        gameStatus,\n      },\n      where: {\n        id,\n      },\n    });\n\n    for (const userId of readyUsers) {\n      await db.usersOnRooms.upsert({\n        where: {\n          userId_roomId: {\n            userId,\n            roomId: id,\n          },\n        },\n        create: {\n          roomId: id,\n          userId,\n          moves: \"[]\",\n          score: 0,\n          role: \"PLAYER\",\n        },\n        update: {},\n      });\n    }\n  } catch {}\n}\n", "// export default [\n//   [0, 7, 0, 0, 0, 0, 0, 0, 0],\n//   [0, 2, 3, 0, 0, 0, 0, 8, 0],\n//   [0, 0, 8, 0, 0, 0, 3, 6, 0],\n//   [2, 0, 0, 0, 0, 6, 7, 9, 0],\n//   [3, 0, 5, 0, 0, 0, 0, 0, 4],\n//   [7, 0, 9, 2, 4, 1, 0, 0, 6],\n//   [0, 0, 7, 0, 8, 0, 9, 0, 1],\n//   [6, 4, 1, 0, 0, 3, 8, 5, 0],\n//   [0, 9, 2, 4, 0, 5, 0, 7, 0]\n// ];\n\nconst zeroBoard = [\n  [0, 0, 0, 0, 0, 0, 0, 0, 0],\n  [0, 0, 0, 0, 0, 0, 0, 0, 0],\n  [0, 0, 0, 0, 0, 0, 0, 0, 0],\n  [0, 0, 0, 0, 0, 0, 0, 0, 0],\n  [0, 0, 0, 0, 0, 0, 0, 0, 0],\n  [0, 0, 0, 0, 0, 0, 0, 0, 0],\n  [0, 0, 0, 0, 0, 0, 0, 0, 0],\n  [0, 0, 0, 0, 0, 0, 0, 0, 0],\n  [0, 0, 0, 0, 0, 0, 0, 0, 0]\n];\n\nconst baseBoard = [\n  [1, 2, 3, 4, 5, 6, 7, 8, 9],\n  [4, 5, 6, 7, 8, 9, 1, 2, 3],\n  [7, 8, 9, 1, 2, 3, 4, 5, 6],\n  [2, 1, 4, 3, 6, 5, 8, 9, 7],\n  [3, 6, 5, 8, 9, 7, 2, 1, 4],\n  [8, 9, 7, 2, 1, 4, 3, 6, 5],\n  [5, 3, 1, 6, 4, 2, 9, 7, 8],\n  [6, 4, 2, 9, 7, 8, 5, 3, 1],\n  [9, 7, 8, 5, 3, 1, 6, 4, 2]\n];\n\nexport default zeroBoard;\nexport { baseBoard };\n", "import { baseBoard } from \"~/const/board\";\nimport type { Board } from \"~/declares/interfaces/Board\";\n\n/**\n *\n * @param {*} left [left, left+right)\n * @param {*} right [left, left+right)\n * return x [left, left+right)\n */\nconst RANDOMNUMBER = (left: number, right: number) => {\n  return ((Math.random() * right) >> 0) + left;\n};\n\nconst RANDOMPAIR = (left: number, right: number) => {\n  let fs = RANDOMNUMBER(left, right);\n  let sc = RANDOMNUMBER(left, right);\n\n  return { first: fs, second: sc };\n};\n\nconst TRANSPOSE = (matrix: number[][]) => {\n  for (var i = 0; i < matrix.length; i++) {\n    for (var j = 0; j < i; j++) {\n      [matrix[i][j], matrix[j][i]] = [matrix[j][i], matrix[i][j]];\n    }\n  }\n};\n\nconst RANDOMBOARD = () => {\n  return new Promise<Board>((resolve) => {\n    let newBoardValue: Board = JSON.parse(JSON.stringify(baseBoard));\n\n    /**\n     * SHUFFLE ROW THEN COL THEN ROW THEN COL THEN ...\n     */\n\n    for (let times = 0; times <= 10; ++times) {\n      for (let left = 0; left <= 6; left += 3) {\n        const pair = RANDOMPAIR(left, 3);\n        [newBoardValue[pair.first], newBoardValue[pair.second]] = [\n          newBoardValue[pair.second],\n          newBoardValue[pair.first],\n        ];\n      }\n\n      TRANSPOSE(newBoardValue);\n    }\n\n    /**\n     * ERASE SOME NUMBER\n     * EZ = 40, MD = 50, HA = 60\n     */\n\n    let eraseCell = 40;\n    while (eraseCell) {\n      let pair = RANDOMPAIR(0, 9);\n      if (newBoardValue[pair.first][pair.second]) {\n        newBoardValue[pair.first][pair.second] = 0;\n        --eraseCell;\n      }\n    }\n\n    resolve(newBoardValue);\n  });\n};\n\nexport default RANDOMBOARD;\n", "import { PrismaClient } from \"@prisma/client\";\n\nlet db: PrismaClient;\n\ndeclare global {\n  var __db: PrismaClient | undefined;\n}\n\n// this is needed because in development we don't want to restart\n// the server with every change, but we want to make sure we don't\n// create a new connection to the DB with every change either.\nif (process.env.NODE_ENV === \"production\") {\n  db = new PrismaClient();\n} else {\n  if (!global.__db) {\n    global.__db = new PrismaClient();\n  }\n  db = global.__db;\n}\n\nexport { db };\n", "import type {\n  ActionArgs,\n  LinksFunction,\n  LoaderFunction,\n} from \"@remix-run/node\";\nimport { json } from \"@remix-run/node\";\nimport { useLoaderData } from \"@remix-run/react\";\nimport BoardGame from \"~/comps/BoardGame\";\n\nimport { useEffect } from \"react\";\nimport { baseBoard } from \"~/const/board\";\nimport { useSocket } from \"~/context\";\nimport mergeMovesWithBoard from \"~/helper/merge\";\nimport SOLVE from \"~/helper/solve\";\nimport stylesUrl from \"~/styles/index.css\";\nimport {\n  getMoves,\n  getRoom,\n  updateMoves,\n  updateGameStatus,\n} from \"~/utils/room.server\";\nimport { requireUserId } from \"~/utils/session.server\";\nimport { SocketEvent } from \"~/declares/interfaces/Socket\";\n\nexport const links: LinksFunction = () => {\n  return [{ rel: \"stylesheet\", href: stylesUrl }];\n};\n\nexport const action = async ({ request }: ActionArgs) => {\n  if (request.method == \"POST\") {\n    const form = await request.formData();\n    const intent = form.get(\"intent\") + \"\";\n\n    if (intent === \"updateGameMoves\") {\n      const userId = form.get(\"userId\") + \"\";\n      const roomId = form.get(\"roomId\") + \"\";\n      const newCurUserMoves = form.get(\"newCurUserMoves\") + \"\";\n      const newScore = Number(form.get(\"newScore\"));\n      await updateMoves({\n        roomId,\n        userId,\n        moves: newCurUserMoves,\n        score: newScore,\n      });\n    }\n    if (intent === \"updateGameStatus\") {\n      const roomId = form.get(\"roomId\") + \"\";\n      const gameStatus = form.get(\"gameStatus\") + \"\";\n      const readyUsers = JSON.parse(form.get(\"readyUsers\") + \"\");\n      await updateGameStatus({ gameStatus, id: roomId, readyUsers });\n    }\n  }\n  return \"\";\n};\n\nexport const loader: LoaderFunction = async ({ params, request }) => {\n  if (!params.roomId) {\n    throw json(\"Not Found\", { status: 404 });\n  }\n  const userId = await requireUserId(request);\n  const room = await getRoom(params.roomId);\n  if (!room) {\n    throw json(\"Not Found\", { status: 404 });\n  }\n  const moveData = await getMoves({ roomId: params.roomId });\n  const moves = moveData?.map((v) => {\n    return {\n      userId: v.userId,\n      moves: JSON.parse(v?.moves || \"[]\"),\n      score: v.score,\n      status: v.role === \"PLAYER\" ? \"PLAYING\" : \"NOT_READY\",\n    };\n  });\n\n  const userMoves = moves?.find((v) => v.userId == userId);\n  const board = mergeMovesWithBoard(\n    moves,\n    JSON.parse(room.board || JSON.stringify(baseBoard))\n  );\n  const solveBoard = await SOLVE(\n    JSON.parse(room.board || JSON.stringify(baseBoard))\n  );\n  return json({\n    solveBoard,\n    roomId: room.id,\n    gameStatus: room.gameStatus,\n    board,\n    userId,\n    moves,\n    curUserStatus: userMoves?.status || \"NOT_READY\",\n    curUserMoves: userMoves?.moves || [],\n    curScore: userMoves?.score || 0,\n  });\n};\n\nexport default function SoloRoom() {\n  const data = useLoaderData<typeof loader>();\n  const socket = useSocket();\n\n  useEffect(() => {\n    if (!socket) return;\n    if (!data) return;\n    socket.emit(SocketEvent.CLIENT_JOIN_ROOM, {\n      userId: data.userId,\n      roomId: data.roomId,\n      score: data.curScore,\n      moves: data.curUserMoves,\n      plus: 0,\n      status: data.curUserStatus,\n    });\n  }, [socket, data]);\n\n  return (\n    <BoardGame\n      initGameStatus={data.gameStatus}\n      solveBoard={data.solveBoard}\n      initGameMoves={data.moves}\n      userId={data.userId}\n      socket={socket}\n      roomId={data.roomId}\n      initBoard={data.board}\n    />\n  );\n}\n", "import { useSubmit } from \"@remix-run/react\";\nimport { useMachine } from \"@xstate/react\";\nimport debounce from \"lodash.debounce\";\nimport { useCallback, useEffect, useMemo, useState } from \"react\";\nimport type { Socket } from \"socket.io-client\";\nimport type { Board } from \"~/declares/interfaces/Board\";\nimport type { GameMove } from \"~/declares/interfaces/GameMove\";\nimport type { RoomId, UserId } from \"~/declares/interfaces/Id\";\nimport type { Pair } from \"~/declares/interfaces/Pair\";\nimport { SocketEvent } from \"~/declares/interfaces/Socket\";\nimport type { UserInfoStatus, UserInRoom } from \"~/declares/interfaces/Socket\";\nimport { createBoardMachine, createGameMachine } from \"~/machine/game\";\nimport {\n  checkValid,\n  getCellUserId,\n  isEnemyCell,\n  isMatchCell,\n  isUserCell,\n} from \"~/utils/game\";\nimport Score from \"../Score\";\nimport Cell from \"./Cell\";\nimport CountDown from \"./CountDown\";\n\ntype BoardGameProps = {\n  initGameStatus: string;\n  solveBoard: Board;\n  initBoard: Board;\n  userId: UserId;\n  roomId: RoomId;\n  socket?: Socket;\n\n  initGameMoves: GameMove[];\n};\n\nconst BoardGame = ({\n  initGameStatus,\n  solveBoard,\n  initBoard,\n  roomId,\n  userId,\n  socket,\n  initGameMoves,\n}: BoardGameProps) => {\n  const [gameState, send] = useMachine(createGameMachine({ initGameMoves }));\n\n  const [boardState, boardSend] = useMachine(\n    createBoardMachine({ board: initBoard, solveBoard })\n  );\n\n  const submit = useSubmit();\n\n  const [usersInRoom, setUsersInRoom] = useState(\n    initGameMoves.filter((v) => v.userId == userId)\n  );\n\n  const postGameMoves = useCallback(\n    debounce(({ moves, score }) => {\n      const formData = new FormData();\n      formData.append(\"roomId\", roomId);\n      formData.append(\"userId\", userId);\n      formData.append(\"newCurUserMoves\", JSON.stringify(moves));\n      formData.append(\"newScore\", JSON.stringify(score));\n      formData.append(\"intent\", \"updateGameMoves\");\n      submit(formData, {\n        method: \"post\",\n        action: `/solo/${roomId}`,\n        replace: true,\n      });\n    }, 650),\n    [boardState.context.selectCell]\n  );\n\n  const makeMove = (pair: Pair, value: number, userPlayId: UserId) => {\n    const newBoardValue = JSON.parse(JSON.stringify(boardState.context.board));\n    newBoardValue[boardState.context.selectCell.row][\n      boardState.context.selectCell.col\n    ] = value;\n\n    socket?.emit(SocketEvent.CLIENT_PLAY, newBoardValue);\n\n    const curInfo = JSON.parse(\n      JSON.stringify(gameState.context.players.find((v) => v.userId == userId))\n    ) as GameMove;\n\n    if (curInfo) {\n      if (\n        solveBoard[boardState.context.selectCell.row][\n          boardState.context.selectCell.col\n        ] == value\n      ) {\n        curInfo.plus = 50;\n        curInfo.score += 50;\n      } else {\n        curInfo.plus = -100;\n        curInfo.score += -100;\n      }\n\n      const isExistCell = curInfo.moves.findIndex((v: number[]) => {\n        return (\n          v[0] == boardState.context.selectCell.row &&\n          v[1] == boardState.context.selectCell.col\n        );\n      });\n      if (isExistCell != -1) {\n        curInfo.moves[isExistCell] = [\n          boardState.context.selectCell.row,\n          boardState.context.selectCell.col,\n          value,\n        ];\n      } else {\n        curInfo.moves.push([\n          boardState.context.selectCell.row,\n          boardState.context.selectCell.col,\n          value,\n        ]);\n      }\n      socket?.emit(SocketEvent.CLIENT_UPDATE_CLIENT, {\n        userInfo: curInfo,\n        roomId,\n      });\n      postGameMoves({ moves: curInfo.moves, score: curInfo.score });\n    }\n  };\n\n  const handleKeyDown = (e: React.KeyboardEvent<HTMLDivElement>) => {\n    let value = -1;\n\n    if (\"1234567890\".includes(e.key)) {\n      value = Number.parseInt(e.key, 10);\n    } else if (e.key === \"Backspace\") {\n      value = 0;\n    } else if (e.key === \"ArrowUp\") {\n      boardSend({\n        type: \"MOVE\",\n        pair: {\n          row: (boardState.context.selectCell.row - 1 + 9) % 9,\n          col: boardState.context.selectCell.col,\n        },\n      });\n    } else if (e.key === \"ArrowLeft\") {\n      boardSend({\n        type: \"MOVE\",\n        pair: {\n          row: boardState.context.selectCell.row,\n          col: (boardState.context.selectCell.col - 1 + 9) % 9,\n        },\n      });\n    } else if (e.key === \"ArrowRight\") {\n      boardSend({\n        type: \"MOVE\",\n        pair: {\n          row: boardState.context.selectCell.row,\n          col: (boardState.context.selectCell.col + 1) % 9,\n        },\n      });\n    } else if (e.key === \"ArrowDown\") {\n      boardSend({\n        type: \"MOVE\",\n        pair: {\n          row: (boardState.context.selectCell.row + 1) % 9,\n          col: boardState.context.selectCell.col,\n        },\n      });\n    }\n\n    if (\n      !e.repeat &&\n      initGameStatus === \"START\" &&\n      value !== -1 &&\n      checkValid(\n        value,\n        gameState.context.players,\n        userId,\n        initBoard,\n        solveBoard,\n        boardState.context.board,\n        boardState.context.selectCell\n      )\n    ) {\n      makeMove(boardState.context.selectCell, value, userId);\n    }\n  };\n\n  useEffect(() => {\n    if (!socket) return;\n    const handleUpdateBoard = (boardValue: Board) => {\n      boardSend({ type: \"UPDATE\", board: boardValue });\n    };\n\n    const handleUpdateClientInfo = ({ userInfo }: { userInfo: GameMove }) => {\n      setUsersInRoom((preUsers) => {\n        const curUser = preUsers.find((user) => user.userId == userInfo.userId);\n        if (curUser) {\n          curUser.moves = userInfo.moves;\n          curUser.plus = userInfo.plus;\n          curUser.score = userInfo.score;\n          curUser.status = userInfo.status;\n        }\n        return JSON.parse(JSON.stringify(preUsers));\n      });\n\n      send({ type: \"GAME.UPDATE\", userInfo });\n    };\n    const handleUpdateStatus = ({ userInfo }: { userInfo: UserInfoStatus }) => {\n      setUsersInRoom((preUsers) => {\n        const curUser = preUsers.find((user) => user.userId == userInfo.userId);\n        if (curUser) {\n          curUser.status = userInfo.status;\n        }\n        return JSON.parse(JSON.stringify(preUsers));\n      });\n    };\n    const handleRemoveClient = ({ userInfo }: { userInfo: UserInRoom }) => {\n      setUsersInRoom((preUsers) => {\n        const newUsers = preUsers.filter((v) => v.userId != userInfo.userId);\n        return JSON.parse(JSON.stringify(newUsers));\n      });\n    };\n    const handleAddClient = ({ usersInfo }: { usersInfo: GameMove[] }) => {\n      setUsersInRoom((preUsers) => {\n        if (preUsers.length > usersInfo.length) return preUsers;\n        return usersInfo;\n      });\n    };\n\n    socket.on(SocketEvent.SERVER_CLIENT_PLAY, handleUpdateBoard);\n    socket.on(SocketEvent.SERVER_UPDATE_CLIENT, handleUpdateClientInfo);\n    socket.on(SocketEvent.SERVER_UPDATE_CLIENT_STATUS, handleUpdateStatus);\n    socket.on(SocketEvent.SERVER_REMOVE_CLIENT, handleRemoveClient);\n    socket.on(SocketEvent.SERVER_ADD_CLIENT, handleAddClient);\n    return () => {\n      socket.off(SocketEvent.SERVER_CLIENT_PLAY, handleUpdateBoard);\n      socket.off(SocketEvent.SERVER_UPDATE_CLIENT, handleUpdateClientInfo);\n      socket.off(SocketEvent.SERVER_UPDATE_CLIENT_STATUS, handleUpdateStatus);\n      socket.off(SocketEvent.SERVER_REMOVE_CLIENT, handleRemoveClient);\n      socket.off(SocketEvent.SERVER_ADD_CLIENT, handleAddClient);\n    };\n  }, [socket, boardSend, send]);\n\n  const curUser = usersInRoom.find((v) => v.userId === userId);\n\n  const isPlay = useMemo(() => {\n    const readyUsers = usersInRoom.filter((v) => v.status === \"READY\");\n    return readyUsers.length === usersInRoom.length;\n  }, [usersInRoom]);\n\n  const onFinish = () => {\n    const formData = new FormData();\n    formData.append(\"intent\", \"updateGameStatus\");\n    formData.append(\"roomId\", roomId);\n    formData.append(\"gameStatus\", \"START\");\n    const readyUsers = JSON.parse(\n      JSON.stringify(usersInRoom.filter((v) => v.status === \"READY\"))\n    ) as GameMove[];\n    formData.append(\n      \"readyUsers\",\n      JSON.stringify(readyUsers.map((v) => v.userId))\n    );\n\n    for (const user of readyUsers) {\n      if (user.userId === userId) {\n        socket?.emit(SocketEvent.CLIENT_UPDATE_CLIENT_STATUS, {\n          userInfo: {\n            userId: user.userId,\n            status: \"PLAYING\",\n          },\n          roomId,\n        });\n      }\n    }\n    submit(formData, {\n      method: \"post\",\n      action: `/solo/${roomId}`,\n      replace: true,\n    });\n    send({\n      type: \"GAME.UPDATE.ALL\",\n      usersInfo: readyUsers.map((v) => ({ ...v, status: \"PLAYING\" })),\n    });\n  };\n\n  return (\n    <div className=\"sudoku-wrapper\" tabIndex={-1} onKeyDown={handleKeyDown}>\n      <div className=\"score-wrapper\">\n        {usersInRoom.map((userInRoom) => (\n          <Score\n            userId={userInRoom.userId}\n            isUser={userInRoom.userId == userId}\n            key={userInRoom.userId}\n            score={userInRoom.score}\n            plusPoint={userInRoom.plus || 0}\n            status={userInRoom.status}\n          />\n        ))}\n      </div>\n\n      <div className=\"game-info\">\n        {initGameStatus === \"READY\" && (\n          <div className=\"start-button-c\">\n            <button\n              className=\"start-button\"\n              type=\"button\"\n              onClick={() => {\n                socket?.emit(SocketEvent.CLIENT_UPDATE_CLIENT_STATUS, {\n                  userInfo: {\n                    userId,\n                    status: curUser?.status === \"READY\" ? \"NOT_READY\" : \"READY\",\n                  },\n                  roomId,\n                });\n              }}\n              disabled={usersInRoom.length < 2}\n            >\n              {usersInRoom.length < 2\n                ? \"Wait for another player to start..\"\n                : curUser?.status === \"READY\"\n                ? \"Remove ready\"\n                : \"Ready\"}\n            </button>\n          </div>\n        )}\n        <div className=\"game-flex-wrapper\">\n          {isPlay && usersInRoom.length >= 2 && initGameStatus === \"READY\" && (\n            <CountDown onFinish={onFinish} />\n          )}\n          <div className=\"game-wrapper\">\n            <div className=\"game\">\n              <table className=\"game-table\">\n                <tbody>\n                  {boardState.context.board.map((row, idx) => (\n                    <tr key={idx} className=\"game-row\">\n                      {row.map((val, idx2) => {\n                        return (\n                          <Cell\n                            userId={getCellUserId(gameState.context.players, {\n                              row: idx,\n                              col: idx2,\n                            })}\n                            isEnemy={isEnemyCell(\n                              gameState.context.players,\n                              userId,\n                              {\n                                row: idx,\n                                col: idx2,\n                              }\n                            )}\n                            isMatchCell={isMatchCell(\n                              solveBoard,\n                              boardState.context.board,\n                              {\n                                row: idx,\n                                col: idx2,\n                              }\n                            )}\n                            isUser={isUserCell(\n                              gameState.context.players,\n                              userId,\n                              {\n                                row: idx,\n                                col: idx2,\n                              }\n                            )}\n                            selectCell={boardState.context.selectCell}\n                            setSelectCell={(pair: Pair) => {\n                              boardSend({ type: \"MOVE\", pair });\n                            }}\n                            cellIdx={{ row: idx, col: idx2 }}\n                            cellVal={initGameStatus === \"START\" ? val : 0}\n                            key={idx * 10 + idx2}\n                            isConflictRow={\n                              boardState.context.canRowXNumberY[idx][val] > 1\n                            }\n                            isConflictCol={\n                              boardState.context.canColXNumberY[idx2][val] > 1\n                            }\n                            isConflictSquare={\n                              boardState.context.canSquareXYNumberZ[\n                                (idx / 3) >> 0\n                              ][(idx2 / 3) >> 0][val] > 1\n                            }\n                            isDefault={initBoard[idx][idx2] !== 0}\n                            isSameValue={\n                              !!boardState.context.board[\n                                boardState.context.selectCell.row\n                              ][boardState.context.selectCell.col] &&\n                              boardState.context.board[\n                                boardState.context.selectCell.row\n                              ][boardState.context.selectCell.col] === val\n                            }\n                          />\n                        );\n                      })}\n                    </tr>\n                  ))}\n                </tbody>\n              </table>\n            </div>\n          </div>\n          <div className=\"game-intro\">\n            <p>\uD83D\uDD79\uFE0F Play with arrow and number keys</p>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default BoardGame;\n", "import { assign, createMachine } from \"xstate\";\nimport type { Board } from \"~/declares/interfaces/Board\";\nimport type { GameMove } from \"~/declares/interfaces/GameMove\";\nimport type { Pair } from \"~/declares/interfaces/Pair\";\n\ninterface IGame {\n  players: GameMove[];\n}\n\ninterface IBoard {\n  board: Board;\n  solveBoard: Board;\n  selectCell: Pair;\n  canRowXNumberY: any[][];\n  canColXNumberY: any[][];\n  canSquareXYNumberZ: any[][];\n}\n\nconst createGameMachine = ({ initGameMoves }: { initGameMoves: GameMove[] }) =>\n  createMachine<IGame>({\n    predictableActionArguments: true,\n    id: \"game\",\n    initial: \"playing\",\n    context: {\n      players: initGameMoves,\n    },\n    states: {\n      playing: {\n        on: {\n          \"GAME.UPDATE.ALL\": {\n            actions: [\n              assign({\n                players: (_, event) => {\n                  return event.usersInfo;\n                },\n              }),\n            ],\n          },\n          \"GAME.UPDATE\": {\n            actions: [\n              assign({\n                players: (context, event) => {\n                  const curUser = context.players.find(\n                    (user) => user.userId == event.userInfo.userId\n                  );\n                  if (curUser) {\n                    curUser.moves = event.userInfo.moves;\n                    curUser.plus = event.userInfo.plus;\n                    curUser.score = event.userInfo.score;\n                    curUser.status = event.userInfo.status;\n                  }\n                  return context.players;\n                },\n              }),\n            ],\n          },\n          \"GAME.FILL\": {\n            actions: [\n              assign({\n                players: (context, event) => {\n                  const curInfo = context.players.find(\n                    (v) => v.userId == event.value.userId\n                  ) as GameMove;\n\n                  if (\n                    event.value.solveBoard[event.value.selectCell.row][\n                      event.value.selectCell.col\n                    ] == event.value.value\n                  ) {\n                    curInfo.plus = 50;\n                    curInfo.score += 50;\n                  } else {\n                    curInfo.plus = -100;\n                    curInfo.score += -100;\n                  }\n\n                  const isExistCell = curInfo.moves.findIndex((v: number[]) => {\n                    return (\n                      v[0] == event.value.selectCell.row &&\n                      v[1] == event.value.selectCell.col\n                    );\n                  });\n                  if (isExistCell != -1) {\n                    curInfo.moves[isExistCell] = [\n                      event.value.selectCell.row,\n                      event.value.selectCell.col,\n                      event.value.value,\n                    ];\n                  } else {\n                    curInfo.moves.push([\n                      event.value.selectCell.row,\n                      event.value.selectCell.col,\n                      event.value.value,\n                    ]);\n                  }\n\n                  return context.players;\n                },\n              }),\n            ],\n          },\n        },\n      },\n    },\n  });\n\nconst createBoardMachine = ({\n  board,\n  solveBoard,\n}: {\n  board: Board;\n  solveBoard: Board;\n}) =>\n  createMachine<IBoard>(\n    {\n      predictableActionArguments: true,\n      id: \"board\",\n      context: {\n        board,\n        solveBoard,\n        selectCell: { row: 4, col: 4 },\n        canRowXNumberY: new Array(9).fill(0).map(() => new Array(10).fill(0)),\n        canColXNumberY: new Array(9).fill(0).map(() => new Array(10).fill(0)),\n        canSquareXYNumberZ: new Array(3)\n          .fill(0)\n          .map(() => new Array(3).fill(0).map(() => new Array(10).fill(0))),\n      },\n      initial: \"playing\",\n      entry: [\"updateCanArray\"],\n      states: {\n        playing: {\n          on: {\n            UPDATE: {\n              actions: [\n                assign({ board: (_, event) => event.board }),\n                \"updateCanArray\",\n              ],\n            },\n            MOVE: {\n              actions: assign({\n                selectCell: (_, event) => {\n                  return event.pair;\n                },\n              }),\n            },\n            FILL: {\n              actions: [\n                assign({\n                  board: (ctx, event) => {\n                    const newBoardValue = JSON.parse(JSON.stringify(ctx.board));\n                    newBoardValue[ctx.selectCell.row][ctx.selectCell.col] =\n                      event.value;\n                    return newBoardValue;\n                  },\n                }),\n                \"updateCanArray\",\n              ],\n            },\n          },\n        },\n      },\n    },\n    {\n      actions: {\n        updateCanArray: assign((ctx) => {\n          let newCanRowXNumberY = new Array(9)\n            .fill(0)\n            .map(() => new Array(10).fill(0));\n          let newCanColXNumberY = new Array(9)\n            .fill(0)\n            .map(() => new Array(10).fill(0));\n          let newCanSquareXYNumberZ = new Array(3)\n            .fill(0)\n            .map(() => new Array(3).fill(0).map(() => new Array(10).fill(0)));\n          for (let i = 0; i < 9; ++i) {\n            for (let j = 0; j < 9; ++j) {\n              if (ctx.board[i][j] === 0) continue;\n              newCanRowXNumberY[i][ctx.board[i][j]] += 1;\n              newCanColXNumberY[j][ctx.board[i][j]] += 1;\n              newCanSquareXYNumberZ[(i / 3) >> 0][(j / 3) >> 0][\n                ctx.board[i][j]\n              ] += 1;\n            }\n          }\n          return {\n            ...ctx,\n            canRowXNumberY: newCanRowXNumberY,\n            canColXNumberY: newCanColXNumberY,\n            canSquareXYNumberZ: newCanSquareXYNumberZ,\n          };\n        }),\n      },\n    }\n  );\n\nexport { createBoardMachine, createGameMachine };\n", "import type { Board, CellValue } from \"~/declares/interfaces/Board\";\nimport type { GameMove } from \"~/declares/interfaces/GameMove\";\nimport type { Pair } from \"~/declares/interfaces/Pair\";\nimport type { UserId } from \"~/declares/interfaces/Id\";\n\nconst getCellUserId = (gameMoves: GameMove[], pair: Pair) => {\n  let userId = \"\";\n  gameMoves?.forEach((user) => {\n    user?.moves?.forEach((move) => {\n      if (move[0] == pair.row && move[1] == pair.col) userId = user.userId;\n    });\n  });\n  return userId;\n};\n\nconst isEnemyCell = (gameMoves: GameMove[], userId: UserId, pair: Pair) => {\n  let flag = false;\n  const usersInfo = gameMoves.filter((user) => user.userId != userId);\n  usersInfo?.forEach((user) => {\n    user?.moves?.forEach((move) => {\n      if (move[0] == pair.row && move[1] == pair.col) flag = true;\n    });\n  });\n  return flag;\n};\n\nconst isUserCell = (gameMoves: GameMove[], userId: UserId, pair: Pair) => {\n  let flag = false;\n  const userInfo = gameMoves.find((user) => user.userId == userId);\n  userInfo?.moves.forEach((move) => {\n    if (move[0] == pair.row && move[1] == pair.col) flag = true;\n  });\n  return flag;\n};\n\nconst isMatchCell = (solveBoard: Board, curBoard: Board, pair: Pair) => {\n  return solveBoard[pair.row][pair.col] == curBoard[pair.row][pair.col];\n};\n\nconst checkValid = (\n  value: CellValue,\n  gameMoves: GameMove[],\n  userId: UserId,\n  initBoard: Board,\n  solveBoard: Board,\n  curBoard: Board,\n  pair: Pair\n) => {\n  if (value === 0)\n    return (\n      !isMatchCell(solveBoard, curBoard, pair) &&\n      isUserCell(gameMoves, userId, pair)\n    );\n  return (\n    !isEnemyCell(gameMoves, userId, pair) &&\n    pair.row >= 0 &&\n    pair.row < 9 &&\n    pair.col >= 0 &&\n    pair.col < 9 &&\n    !isMatchCell(solveBoard, curBoard, pair) &&\n    (!initBoard[pair.row][pair.col] || isUserCell(gameMoves, userId, pair))\n  );\n};\n\nfunction randBetween(min: number, max: number) {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\nexport {\n  getCellUserId,\n  isEnemyCell,\n  isMatchCell,\n  isUserCell,\n  checkValid,\n  randBetween,\n};\n", "import { useCallback } from \"react\";\nimport hashToAvatar from \"~/helper/hash\";\nimport Point from \"./point\";\n\ntype ScoreProps = {\n  userId: string;\n  score: number;\n  plusPoint: number;\n  isUser: boolean;\n  status: string;\n};\n\nexport default function Score({\n  userId,\n  score,\n  plusPoint,\n  isUser,\n  status,\n}: ScoreProps) {\n  const MyPoint = useCallback(() => <Point plusPoint={plusPoint} />, [score]);\n\n  const avatarStyle = {\n    [\"--avatar-image\" as any]: `url(${hashToAvatar(userId)})`,\n  };\n\n  return (\n    <div style={avatarStyle} className={`score-info`}>\n      <div>{isUser ? \"MY\" : \"\"} SCORES</div>\n      <h2>{score || 0}</h2>\n      <MyPoint />\n      {status === \"NOT_READY\" ? \"NOT READY\" : status}\n    </div>\n  );\n}\n", "const userImages = [\n  \"https://partyanimals.com/static/img/avatars_12@2x.f05718d8.jpg\",\n  \"https://partyanimals.com/static/img/avatars_11@2x.c841344e.jpg\",\n  \"https://partyanimals.com/static/img/avatars_10@2x.fdc921f3.jpg\",\n  \"https://partyanimals.com/static/img/avatars_09@2x.349eb9e1.jpg\",\n  \"https://partyanimals.com/static/img/avatars_08@2x.f4b168ab.jpg\",\n  \"https://partyanimals.com/static/img/avatars_07@2x.5d95c63b.jpg\",\n  \"https://partyanimals.com/static/img/avatars_06@2x.e1140503.jpg\",\n  \"https://partyanimals.com/static/img/avatars_05@2x.4e4403b7.jpg\",\n  \"https://partyanimals.com/static/img/avatars_04@2x.a8f03c96.jpg\",\n  \"https://partyanimals.com/static/img/avatars_03@2x.7ab39dde.jpg\",\n  \"https://partyanimals.com/static/img/avatars_02@2x.c7280e5d.jpg\",\n  \"https://partyanimals.com/static/img/avatars_01@2x.4857b43c.jpg\",\n];\n\nexport default function hashToAvatar(str: string) {\n  let idx = 0;\n  const mod = userImages.length;\n  for (const c of str) {\n    idx += c.charCodeAt(0);\n    idx %= mod;\n  }\n  return userImages[idx];\n}\n", "export default function Point({ plusPoint }) {\n  return (\n    <div className=\"plus-point\">\n      {plusPoint < 0 ? \"\" : \"+\"}\n      {plusPoint}\n    </div>\n  );\n}\n", "import type { Pair } from \"~/declares/interfaces/Pair\";\nimport hashToAvatar from \"~/helper/hash\";\n\ntype CellProps = {\n  userId: string;\n  isEnemy: boolean;\n  isUser: boolean;\n  isSameValue: boolean;\n  isDefault: boolean;\n  isConflictSquare: boolean;\n  setSelectCell: Function;\n  selectCell: Pair;\n  cellIdx: Pair;\n  cellVal: number;\n  isConflictRow: boolean;\n  isConflictCol: boolean;\n  isMatchCell: boolean;\n};\n\nconst Cell = ({\n  userId,\n  setSelectCell,\n  selectCell,\n  cellIdx,\n  cellVal,\n  isConflictRow,\n  isConflictCol,\n  isConflictSquare,\n  isDefault,\n  isSameValue,\n  isUser,\n  isEnemy,\n  isMatchCell,\n}: CellProps) => {\n  const avatarStyle = {\n    [\"--avatar-image-cell\" as any]: `url(\"${hashToAvatar(userId)}\")`,\n  };\n\n  const isUserCell = isEnemy || isUser;\n\n  const isSelecting =\n    selectCell.row === cellIdx.row && selectCell.col === cellIdx.col;\n  const selectedCellClass = isSelecting ? \" cell-selected \" : \"\";\n  const isSameRow = selectCell.row === cellIdx.row;\n  const isSameCol = selectCell.col === cellIdx.col;\n  const isSameSquare =\n    (selectCell.row / 3) >> 0 === (cellIdx.row / 3) >> 0 &&\n    (selectCell.col / 3) >> 0 === (cellIdx.col / 3) >> 0;\n\n  const hightLightCellClass =\n    isSameRow || isSameCol || isSameSquare || isSameValue\n      ? \" table-hightlight \"\n      : \"\";\n  const numerHightLightClass = isSameValue ? \" number-hightlight \" : \"\";\n\n  const isNumber = isUserCell || (!isDefault && cellVal !== 0);\n  const numberClass = isNumber ? \" number \" : \"\";\n\n  const isMatchCellClass = isUserCell && isMatchCell ? \" match-cell \" : \"\";\n\n  const conflictCellClass =\n    (isConflictCol || isConflictRow || isConflictSquare) &&\n    isNumber &&\n    !isMatchCell\n      ? \" number-conflict \"\n      : \"\";\n  const conflictValueClass = conflictCellClass ? \" default-conflict \" : \"\";\n\n  const isUserClass = isUser ? \" user-cell \" : \"\";\n  const isEnemyClass = isEnemy ? \" enemy-cell \" : \"\";\n  /**\n   *\n   */\n  const handleSelectCell = () => {\n    setSelectCell(cellIdx);\n  };\n\n  return (\n    <>\n      <td\n        style={avatarStyle}\n        className={\n          `game-cell` +\n          isEnemyClass +\n          isUserClass +\n          selectedCellClass +\n          hightLightCellClass +\n          numberClass +\n          conflictCellClass +\n          numerHightLightClass +\n          isMatchCellClass\n        }\n        onClick={() => handleSelectCell()}\n      >\n        <div className={`cell-value` + conflictValueClass}>\n          <span>{`${cellVal || \"\"}`}</span>\n        </div>\n      </td>\n    </>\n  );\n};\n\nexport default Cell;\n", "import { useEffect } from \"react\";\nimport { useCountdown } from \"~/hooks/useCountDown\";\n\ntype CountDownProps = {\n  onFinish: Function;\n};\n\nconst CountDown = ({ onFinish }: CountDownProps) => {\n  const { count, formatCountdown } = useCountdown(5);\n\n  useEffect(() => {\n    if (Math.floor(count) === 5000) {\n      onFinish();\n    }\n  }, [count]);\n\n  return <div>The game will start in {formatCountdown()}</div>;\n};\n\nexport default CountDown;\n", "import { useState, useEffect, useCallback } from \"react\";\n\nexport function useCountdown(duration: number) {\n  const [count, setCount] = useState(0);\n\n  useEffect(() => {\n    let start: number, previousTimeStamp: number;\n\n    function step(timestamp: number) {\n      if (start === undefined) {\n        start = timestamp;\n      }\n      const elapsed = timestamp - start;\n\n      if (previousTimeStamp !== timestamp) {\n        setCount(Math.min(elapsed, duration * 1000));\n      }\n\n      if (elapsed < duration * 1000) {\n        previousTimeStamp = timestamp;\n        requestAnimationFrame(step);\n      }\n    }\n\n    const frame = requestAnimationFrame(step);\n\n    return () => cancelAnimationFrame(frame);\n  }, [duration]);\n\n  const formatCountdown = useCallback(() => {\n    const remaining = Math.floor((duration * 1000 - count) / 1000);\n    const milliseconds = Math.floor(\n      (Math.floor(duration * 1000 - count) % 1000) / 100\n    );\n    return `${remaining.toString()}.${milliseconds.toString()}`;\n  }, [count, duration]);\n\n  return { count, formatCountdown };\n}\n", "export default function mergeMovesWithBoard(moves, board) {\n  moves.forEach(move => {\n    move.moves.forEach(userMove => {\n      board[userMove[0]][userMove[1]] = userMove[2];\n    })\n  })\n  return board;\n}", "import type { Board } from \"~/declares/interfaces/Board\";\nimport type { Pair } from \"~/declares/interfaces/Pair\";\n\nconst SOLVE = (boardValue: Board) => {\n  return new Promise<Board>((resolve, reject) => {\n    let canRowXNumberY = new Array(9)\n      .fill(0)\n      .map(() => new Array(9 + 1).fill(true));\n    let canColXNumberY = new Array(9)\n      .fill(0)\n      .map(() => new Array(9 + 1).fill(true));\n    let canSquareXYNumberZ = new Array(3)\n      .fill(0)\n      .map(() => new Array(3).fill(0).map(() => new Array(9 + 1).fill(true)));\n\n    for (let i = 0; i < 9; ++i) {\n      for (let j = 0; j < 9; ++j) {\n        if (boardValue[i][j] === 0) continue;\n        if (\n          !canRowXNumberY[i][boardValue[i][j]] ||\n          !canColXNumberY[j][boardValue[i][j]] ||\n          !canSquareXYNumberZ[(i / 3) >> 0][(j / 3) >> 0][boardValue[i][j]]\n        ) {\n          reject(false);\n          return;\n        }\n\n        canRowXNumberY[i][boardValue[i][j]] = false;\n        canColXNumberY[j][boardValue[i][j]] = false;\n        canSquareXYNumberZ[(i / 3) >> 0][(j / 3) >> 0][boardValue[i][j]] =\n          false;\n      }\n    }\n\n    const checkValidIndex = (pair: Pair, number: number) => {\n      return (\n        pair.row >= 0 &&\n        pair.row < 9 &&\n        pair.col >= 0 &&\n        pair.col < 9 &&\n        canColXNumberY[pair.col][number] &&\n        canRowXNumberY[pair.row][number] &&\n        canSquareXYNumberZ[Math.floor(pair.row / 3)][Math.floor(pair.col / 3)][\n          number\n        ]\n      );\n    };\n\n    const markIndex = (pair: Pair, number: number, value: boolean) => {\n      canColXNumberY[pair.col][number] =\n        canRowXNumberY[pair.row][number] =\n        canSquareXYNumberZ[Math.floor(pair.row / 3)][Math.floor(pair.col / 3)][\n          number\n        ] =\n          value;\n    };\n\n    const solveSudoku = (sudokuBoard: Board, x: number, y: number): boolean => {\n      if (sudokuBoard[x][y] !== 0) {\n        if (y + 1 === 9) {\n          if (x + 1 === 9) return true;\n          return solveSudoku(sudokuBoard, x + 1, 0);\n        } else {\n          return solveSudoku(sudokuBoard, x, y + 1);\n        }\n      } else {\n        let c = sudokuBoard[x][y];\n        for (let i = 1; i <= 9; ++i) {\n          if (checkValidIndex({ row: x, col: y }, i)) {\n            sudokuBoard[x][y] = i;\n            markIndex({ row: x, col: y }, i, false);\n            if (y + 1 === 9) {\n              if (x + 1 === 9) return true;\n              if (solveSudoku(sudokuBoard, x + 1, 0)) return true;\n            } else {\n              if (solveSudoku(sudokuBoard, x, y + 1)) return true;\n            }\n            markIndex({ row: x, col: y }, i, true);\n          }\n        }\n        sudokuBoard[x][y] = c;\n        return false;\n      }\n    };\n\n    let boardSolve = JSON.parse(JSON.stringify(boardValue));\n    solveSudoku(boardSolve, 0, 0);\n    resolve(boardSolve);\n  });\n};\n\nexport default SOLVE;\n", "import bcrypt from \"bcryptjs\";\n\nimport {\n  createCookieSessionStorage,\n  redirect,\n} from \"@remix-run/node\";\n\nimport { db } from \"./db.server\";\n\ntype LoginForm = {\n  username: string;\n  password: string;\n};\n\nexport async function login({\n  username,\n  password,\n}: LoginForm) {\n  const user = await db.user.findUnique({\n    where: { username },\n  });\n  if (!user) return null;\n\n  const isCorrectPassword = await bcrypt.compare(\n    password,\n    user.passwordHash\n  );\n  if (!isCorrectPassword) return null;\n\n  return { id: user.id, username };\n}\n\n\nconst sessionSecret = process.env.SESSION_SECRET;\nif (!sessionSecret) {\n  throw new Error(\"SESSION_SECRET must be set\");\n}\n\nconst storage = createCookieSessionStorage({\n  cookie: {\n    name: \"RJ_session\",\n    // normally you want this to be `secure: true`\n    // but that doesn't work on localhost for Safari\n    // https://web.dev/when-to-use-local-https/\n    secure: process.env.NODE_ENV === \"production\",\n    secrets: [sessionSecret],\n    sameSite: \"lax\",\n    path: \"/\",\n    maxAge: 60 * 60 * 24 * 30,\n    httpOnly: true,\n  },\n});\n\nfunction getUserSession(request: Request) {\n  return storage.getSession(request.headers.get(\"Cookie\"));\n}\n\nexport async function getUserId(request: Request) {\n  const session = await getUserSession(request);\n  const userId = session.get(\"userId\");\n\n  if (!userId || typeof userId !== \"string\") return null;\n  return userId;\n}\n\nexport async function requireUserId(\n  request: Request,\n  redirectTo: string = new URL(request.url).pathname\n) {\n  const session = await getUserSession(request);\n  const userId = session.get(\"userId\");\n  if (!userId || typeof userId !== \"string\") {\n    const searchParams = new URLSearchParams([\n      [\"redirectTo\", redirectTo],\n    ]);\n    throw redirect(`/login?${searchParams}`);\n  }\n  return userId;\n}\n\nexport async function createUserSession(\n  userId: string,\n  redirectTo: string\n) {\n  const session = await storage.getSession();\n  session.set(\"userId\", userId);\n  return redirect(redirectTo, {\n    headers: {\n      \"Set-Cookie\": await storage.commitSession(session),\n    },\n  });\n}\n\nexport async function getUser(request: Request) {\n  const userId = await getUserId(request);\n  if (typeof userId !== \"string\") {\n    return null;\n  }\n\n  try {\n    const user = await db.user.findUnique({\n      where: { id: userId },\n      select: { id: true, username: true },\n    });\n    return user;\n  } catch {\n    throw logout(request);\n  }\n}\n\nexport async function logout(request: Request) {\n  const session = await getUserSession(request);\n  return redirect(\"/login\", {\n    headers: {\n      \"Set-Cookie\": await storage.destroySession(session),\n    },\n  });\n}\n\n\nexport async function register({\n  username,\n  password,\n}: LoginForm) {\n  const passwordHash = await bcrypt.hash(password, 10);\n  const user = await db.user.create({\n    data: { username, passwordHash },\n  });\n  return { id: user.id, username };\n}\n", "import type { LoaderArgs } from \"@remix-run/node\";\nimport { json } from \"@remix-run/node\";\nimport { useLoaderData } from \"@remix-run/react\";\n\nimport BoardGame from \"~/comps/BoardGame/BotPlay\";\nimport Header from \"~/comps/Header\";\n\nimport RANDOMBOARD from \"~/helper/random\";\nimport SOLVE from \"~/helper/solve\";\nimport { getUser } from \"~/utils/session.server\";\n\nimport { Outlet } from \"@remix-run/react\";\nimport UsersOnline from \"~/comps/UsersOnline/UsersOnline\";\nimport { getRooms } from \"~/utils/room.server\";\n\nexport const loader = async ({ request }: LoaderArgs) => {\n  const user = await getUser(request);\n\n  const board = await RANDOMBOARD();\n\n  const solveBoard = await SOLVE(board);\n\n  const rooms = await getRooms();\n\n  return json({\n    user,\n    solveBoard,\n    board,\n    rooms,\n  });\n};\n\nexport default function Index() {\n  const data = useLoaderData<typeof loader>();\n  const user = data.user as { id: string; username: string };\n\n  return (\n    <div>\n      <Header user={user} />\n\n      <div className=\"lobby-c\">\n        <Outlet />\n        <BoardGame\n          solveBoard={data.solveBoard}\n          initGameMoves={[\n            {\n              moves: [],\n              userId: \"USER_LOCAL_ID\",\n              score: 0,\n              plus: 0,\n            },\n            {\n              moves: [],\n              userId: \"BOT_LOCAL_ID\",\n              score: 0,\n              plus: 0,\n            },\n          ]}\n          userId={\"USER_LOCAL_ID\"}\n          initBoard={data.board}\n        />\n        <UsersOnline rooms={data.rooms} user={data.user} />\n      </div>\n    </div>\n  );\n}\n", "import type { SetStateAction } from \"react\";\nimport { useEffect, useRef, useState } from \"react\";\nimport type { Board } from \"~/declares/interfaces/Board\";\nimport type { GameMove } from \"~/declares/interfaces/GameMove\";\nimport type { Pair } from \"~/declares/interfaces/Pair\";\nimport type { UserId } from \"~/declares/interfaces/Id\";\nimport {\n  checkValid,\n  getCellUserId,\n  isEnemyCell,\n  isMatchCell,\n  isUserCell,\n  randBetween,\n} from \"~/utils/game\";\nimport Score from \"../Score\";\nimport Cell from \"./Cell\";\nimport { json } from \"@remix-run/node\";\n\ntype BoardGameProps = {\n  solveBoard: Board;\n  initBoard: Board;\n  userId: UserId;\n  initGameMoves: GameMove[];\n};\n\nconst BoardGame = ({\n  solveBoard,\n  initBoard,\n  userId,\n  initGameMoves,\n}: BoardGameProps) => {\n  const sudokuWrapperRef = useRef<HTMLDivElement>(null);\n\n  const [isGameStart, setIsGameStart] = useState(false);\n\n  const [gameMoves, setGameMoves] = useState(initGameMoves);\n\n  const [selectCell, setSelectCell] = useState<Pair>({ row: 4, col: 4 });\n\n  const [curBoard, setCurBoard] = useState(initBoard);\n\n  const [firstBoard] = useState(initBoard);\n\n  const [canRowXNumberY, setCanRowXNumberY] = useState(\n    new Array(9).fill(0).map(() => new Array(10).fill(0))\n  );\n  const [canColXNumberY, setCanColXNumberY] = useState(\n    new Array(9).fill(0).map(() => new Array(10).fill(0))\n  );\n  const [canSquareXYNumberZ, setCanSquareXYNumberZ] = useState(\n    new Array(3)\n      .fill(0)\n      .map(() => new Array(3).fill(0).map(() => new Array(10).fill(0)))\n  );\n\n  useEffect(() => {\n    if (!isGameStart) return;\n    if (sudokuWrapperRef === null) return;\n    const currentSudokuRef = sudokuWrapperRef.current;\n    const makeMove = (pair: Pair, value: number, userPlayId: UserId) => {\n      setCurBoard((preState) => {\n        const newBoardValue = JSON.parse(JSON.stringify(preState));\n        newBoardValue[pair.row][pair.col] = value;\n        return newBoardValue;\n      });\n      setGameMoves((preState) => {\n        const curInfo = preState.find((v) => v.userId == userPlayId);\n\n        if (curInfo) {\n          if (value) {\n            if (solveBoard[pair.row][pair.col] == value) {\n              curInfo.plus = 50;\n              curInfo.score += 50;\n            } else {\n              curInfo.plus = -100;\n              curInfo.score += -100;\n            }\n          } else {\n            curInfo.plus = 0;\n          }\n\n          const isExistCell = curInfo.moves.findIndex((v: number[]) => {\n            return v[0] == pair.row && v[1] == pair.col;\n          });\n          if (isExistCell != -1) {\n            curInfo.moves[isExistCell] = [pair.row, pair.col, value];\n          } else {\n            curInfo.moves.push([pair.row, pair.col, value]);\n          }\n          return JSON.parse(JSON.stringify(preState));\n        }\n        return preState;\n      });\n    };\n\n    const handleKeyDown = (e: KeyboardEvent) => {\n      e.preventDefault();\n      let value = -1;\n      if (\"1234567890\".includes(e.key)) {\n        value = Number.parseInt(e.key, 10);\n      } else if (e.key === \"Backspace\") {\n        value = 0;\n      } else if (e.key === \"ArrowUp\") {\n        setSelectCell((preState) => ({\n          row: (preState.row - 1 + 9) % 9,\n          col: preState.col,\n        }));\n      } else if (e.key === \"ArrowLeft\") {\n        setSelectCell((preState) => ({\n          row: preState.row,\n          col: (preState.col - 1 + 9) % 9,\n        }));\n      } else if (e.key === \"ArrowRight\") {\n        setSelectCell((preState) => ({\n          row: preState.row,\n          col: (preState.col + 1) % 9,\n        }));\n      } else if (e.key === \"ArrowDown\") {\n        setSelectCell((preState) => ({\n          row: (preState.row + 1) % 9,\n          col: preState.col,\n        }));\n      }\n\n      if (\n        !e.repeat &&\n        checkValid(\n          value,\n          gameMoves,\n          userId,\n          initBoard,\n          solveBoard,\n          curBoard,\n          selectCell\n        ) &&\n        value !== -1\n      ) {\n        makeMove(selectCell, value, userId);\n      }\n    };\n    currentSudokuRef?.addEventListener(\"keydown\", handleKeyDown);\n\n    return function cleanup() {\n      if (currentSudokuRef)\n        currentSudokuRef?.removeEventListener(\"keydown\", handleKeyDown);\n    };\n  }, [\n    isGameStart,\n    gameMoves,\n    initBoard,\n    curBoard,\n    solveBoard,\n    userId,\n    sudokuWrapperRef,\n    selectCell,\n  ]);\n\n  useEffect(() => {\n    const updateCanArray = () => {\n      let newCanRowXNumberY = new Array(9)\n        .fill(0)\n        .map(() => new Array(10).fill(0));\n      let newCanColXNumberY = new Array(9)\n        .fill(0)\n        .map(() => new Array(10).fill(0));\n      let newCanSquareXYNumberZ = new Array(3)\n        .fill(0)\n        .map(() => new Array(3).fill(0).map(() => new Array(10).fill(0)));\n      for (let i = 0; i < 9; ++i) {\n        for (let j = 0; j < 9; ++j) {\n          if (curBoard[i][j] === 0) continue;\n          newCanRowXNumberY[i][curBoard[i][j]] += 1;\n          newCanColXNumberY[j][curBoard[i][j]] += 1;\n          newCanSquareXYNumberZ[(i / 3) >> 0][(j / 3) >> 0][\n            curBoard[i][j]\n          ] += 1;\n        }\n      }\n\n      setCanRowXNumberY(newCanRowXNumberY);\n      setCanColXNumberY(newCanColXNumberY);\n      setCanSquareXYNumberZ(newCanSquareXYNumberZ);\n    };\n\n    updateCanArray();\n  }, [curBoard]);\n\n  useEffect(() => {\n    if (!isGameStart) return;\n\n    const makeMove = (pair: Pair, value: number, userPlayId: UserId) => {\n      setCurBoard((preState) => {\n        const newBoardValue = JSON.parse(JSON.stringify(preState));\n        newBoardValue[pair.row][pair.col] = value;\n        return newBoardValue;\n      });\n      setGameMoves((preState) => {\n        const curInfo = preState.find((v) => v.userId == userPlayId);\n\n        if (curInfo) {\n          if (value) {\n            if (solveBoard[pair.row][pair.col] == value) {\n              curInfo.plus = 50;\n              curInfo.score += 50;\n            } else {\n              curInfo.plus = -100;\n              curInfo.score += -100;\n            }\n          } else {\n            curInfo.plus = 0;\n          }\n\n          const isExistCell = curInfo.moves.findIndex((v: number[]) => {\n            return v[0] == pair.row && v[1] == pair.col;\n          });\n          if (isExistCell != -1) {\n            curInfo.moves[isExistCell] = [pair.row, pair.col, value];\n          } else {\n            curInfo.moves.push([pair.row, pair.col, value]);\n          }\n          return JSON.parse(JSON.stringify(preState));\n        }\n        return preState;\n      });\n    };\n\n    const xyz = setInterval(() => {\n      const row = randBetween(0, 8);\n      const col = randBetween(0, 8);\n      let isCorrect = randBetween(1, 10) <= 5;\n      const value = isCorrect ? solveBoard[row][col] : randBetween(1, 9);\n      if (\n        checkValid(\n          value,\n          gameMoves,\n          \"BOT_LOCAL_ID\",\n          initBoard,\n          solveBoard,\n          curBoard,\n          { row, col }\n        )\n      ) {\n        makeMove({ row, col }, value, \"BOT_LOCAL_ID\");\n      }\n    }, 2000);\n    return () => {\n      clearInterval(xyz);\n    };\n  }, [isGameStart, curBoard, gameMoves, initBoard, solveBoard]);\n\n  // FINISH\n  useEffect(() => {}, []);\n\n  return (\n    <div className=\"sudoku-wrapper\">\n      <div className=\"score-wrapper\">\n        {gameMoves.map((userInRoom) => (\n          <Score\n            userId={userInRoom.userId}\n            isUser={userInRoom.userId == userId}\n            key={userInRoom.userId}\n            score={userInRoom.score}\n            plusPoint={userInRoom.plus || 0}\n            status={\"\"}\n          />\n        ))}\n        {!isGameStart && (\n          <div className=\"start-button-c\">\n            <button\n              className=\"start-button\"\n              type=\"button\"\n              onClick={() => {\n                setIsGameStart(true);\n              }}\n            >\n              Play with bot\n            </button>\n          </div>\n        )}\n      </div>\n\n      <div className=\"game-flex-wrapper\">\n        <div className=\"game-wrapper\" ref={sudokuWrapperRef} tabIndex={-1}>\n          <div className=\"game\">\n            <table className=\"game-table\">\n              <tbody>\n                {curBoard.map((row, idx) => (\n                  <tr key={idx} className=\"game-row\">\n                    {row.map((val, idx2) => {\n                      return (\n                        <Cell\n                          userId={getCellUserId(gameMoves, {\n                            row: idx,\n                            col: idx2,\n                          })}\n                          isEnemy={isEnemyCell(gameMoves, userId, {\n                            row: idx,\n                            col: idx2,\n                          })}\n                          isMatchCell={isMatchCell(solveBoard, curBoard, {\n                            row: idx,\n                            col: idx2,\n                          })}\n                          isUser={isUserCell(gameMoves, userId, {\n                            row: idx,\n                            col: idx2,\n                          })}\n                          selectCell={selectCell}\n                          setSelectCell={setSelectCell}\n                          cellIdx={{ row: idx, col: idx2 }}\n                          cellVal={isGameStart ? val : 0}\n                          key={idx2}\n                          isConflictRow={canRowXNumberY[idx][val] > 1}\n                          isConflictCol={canColXNumberY[idx2][val] > 1}\n                          isConflictSquare={\n                            canSquareXYNumberZ[(idx / 3) >> 0][(idx2 / 3) >> 0][\n                              val\n                            ] > 1\n                          }\n                          isDefault={firstBoard[idx][idx2] !== 0}\n                          isSameValue={\n                            !!curBoard[selectCell.row][selectCell.col] &&\n                            curBoard[selectCell.row][selectCell.col] === val\n                          }\n                        />\n                      );\n                    })}\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          </div>\n        </div>\n\n        <div className=\"game-intro\">\n          <p>\uD83D\uDD79\uFE0F Play with arrow and number keys</p>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default BoardGame;\n", "import { Link } from \"@remix-run/react\";\n\ntype HeaderProps = {\n  user: {\n    id: string;\n    username: string;\n  };\n};\n\nexport default function Header({ user }: HeaderProps) {\n  return (\n    <div className=\"app-header\">\n      <nav>\n        {user ? (\n          <form action=\"/logout\" method=\"post\">\n            <button type=\"submit\" className=\"button\">\n              Sign out\n            </button>\n          </form>\n        ) : (\n          <Link to=\"/login\">Sign in</Link>\n        )}\n      </nav>\n\n      <div className=\"app-header__slogan\">\n        <span className=\"slogan--highlight\">Competitive sudoku</span>\n        <span className=\"slogan\">\n          Where we can train our mind. Play with friends. May the force be with\n          you!\n        </span>\n      </div>\n\n      <div>\n        {user?.username == \"kody\" ? (\n          <form method=\"post\" action=\"/\">\n            <button type=\"submit\">Create game</button>\n          </form>\n        ) : (\n          \"\"\n        )}\n      </div>\n    </div>\n  );\n}\n", "import type { SerializeFrom } from \"@remix-run/node\";\nimport { useEffect, useState } from \"react\";\nimport EmptyUser from \"~/assets/empty-users.jpeg\";\nimport { useSocket } from \"~/context\";\nimport { SocketEvent } from \"~/declares/interfaces/Socket\";\nimport hashToAvatar from \"~/helper/hash\";\n\ntype UsersOnlineProps = {\n  user: SerializeFrom<{ id: string; username: string }> | null;\n};\n\nexport default function UsersOnline({ user }: UsersOnlineProps) {\n  const [show, setShow] = useState(false);\n  const [users, setUsers] = useState<\n    {\n      socketId: string;\n      username?: string;\n      userId?: string;\n    }[]\n  >([]);\n  const socket = useSocket();\n\n  useEffect(() => {\n    if (!socket) return;\n    socket.on(\"connect\", () => {\n      socket.emit(SocketEvent.CLIENT_CONNECTED, { user, socketId: socket.id });\n    });\n  }, [socket, user]);\n\n  useEffect(() => {\n    if (!socket) return;\n    socket.on(SocketEvent.SERVER_CLIENT_CONNECTED, (listUserOnline) => {\n      setUsers(listUserOnline);\n    });\n  }, [socket]);\n\n  return (\n    <div className={`list-user-c ${!show ? \"show\" : \"\"}`}>\n      <div className=\"list-user\">\n        {users.length > 0 ? (\n          users.map((v) => (\n            <div className=\"user-info\" key={v.socketId}>\n              <img\n                className=\"user-info__avatar\"\n                src={hashToAvatar(v?.userId ? v.userId : v.socketId)}\n                alt=\"avatar\"\n                width={48}\n                height={48}\n              />\n              {v?.userId ? v.username : \"Guest\"}\n            </div>\n          ))\n        ) : (\n          <div className=\"empty-info empty-user\">\n            <img src={EmptyUser} alt=\"empty user\" />\n            <span className=\"empty-text\">People not join the game yet.</span>\n          </div>\n        )}\n      </div>\n      <div\n        className=\"list-user-tag\"\n        onClick={() => {\n          setShow((pre) => !pre);\n        }}\n      >\n        Users Online\n      </div>\n    </div>\n  );\n}\n", "import type { LoaderArgs } from \"@remix-run/node\";\nimport { json } from \"@remix-run/node\";\nimport { Link, useLoaderData, useNavigate } from \"@remix-run/react\";\nimport { formatDistanceToNowStrict } from \"date-fns\";\nimport { useRef, useState } from \"react\";\nimport LookUp from \"~/assets/svg/LookUp\";\nimport { getRooms } from \"~/utils/room.server\";\nimport EmptyRoom from \"~/assets/empty-rooms.jpeg\";\n\nexport const loader = async ({ request }: LoaderArgs) => {\n  const rooms = await getRooms();\n\n  return json({\n    rooms,\n  });\n};\n\nexport default function Lobby() {\n  const data = useLoaderData<typeof loader>();\n  const [show, setShow] = useState(false);\n  const navigate = useNavigate();\n  const getRoomFormRef = useRef(null);\n\n  const getRoom = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (getRoomFormRef.current) {\n      const data = new FormData(getRoomFormRef.current);\n      const idRoom = data.get(\"idRoom\");\n      navigate(`/solo/${idRoom}`);\n    }\n  };\n\n  return (\n    <div className={`list-room-c ${!show ? \"show\" : \"\"}`}>\n      <div className=\"list-room\">\n        <label className=\"app-header__findroom\">\n          <div style={{ flexShrink: 0 }}>\n            <LookUp />\n          </div>\n          <form onSubmit={getRoom} ref={getRoomFormRef}>\n            <input name=\"idRoom\" placeholder=\"Type the room id..\" />\n          </form>\n        </label>\n        {data.rooms.length > 0 ? (\n          data.rooms.map((v, idx) => (\n            <div className=\"room-info\" key={v.id}>\n              <Link to={`/solo/${v.id}`}>\n                Room {idx + 1}\n                <span className=\"room-info__time\">\n                  {formatDistanceToNowStrict(new Date(v.createdAt))}\n                </span>\n              </Link>\n            </div>\n          ))\n        ) : (\n          <div className=\"empty-info empty-room\">\n            <img src={EmptyRoom} alt=\"empty room\" />\n            <span className=\"empty-text\">Admin will create a room soon.</span>\n          </div>\n        )}\n      </div>\n      <div\n        className=\"list-room-tag\"\n        onClick={() => {\n          setShow((pre) => !pre);\n        }}\n      >\n        Room Name\n      </div>\n    </div>\n  );\n}\n", "\nconst SvgComponent = () => (\n  <svg width={16} height={16} fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n    <path\n      d=\"M7 13A6 6 0 1 0 7 1a6 6 0 0 0 0 12ZM15 15l-3-3\"\n      stroke=\"#4A5568\"\n      strokeWidth={2}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n    />\n  </svg>\n);\n\nexport default SvgComponent;\n", "import type { ActionArgs } from \"@remix-run/node\";\nimport { redirect } from \"@remix-run/node\";\n\nimport { logout } from \"~/utils/session.server\";\n\nexport const action = async ({ request }: ActionArgs) => {\n  return logout(request);\n};\n\nexport const loader = async () => {\n  return redirect(\"/\");\n};\n", "import type { ActionArgs, LinksFunction } from \"@remix-run/node\";\nimport { useActionData, useSearchParams } from \"@remix-run/react\";\nimport stylesUrl from \"~/styles/login.css\";\nimport { db } from \"~/utils/db.server\";\nimport { badRequest } from \"~/utils/request.server\";\nimport { createUserSession, login, register } from \"~/utils/session.server\";\n\nexport const links: LinksFunction = () => [\n  { rel: \"stylesheet\", href: stylesUrl },\n];\n\nfunction validateUsername(username: unknown) {\n  if (typeof username !== \"string\" || username.length < 3) {\n    return `Usernames must be at least 3 characters long`;\n  }\n}\n\nfunction validatePassword(password: unknown) {\n  if (typeof password !== \"string\" || password.length < 6) {\n    return `Passwords must be at least 6 characters long`;\n  }\n}\n\nfunction validateUrl(url: string | FormDataEntryValue) {\n  let urls = [\"/solo\"];\n  if (\n    urls.findIndex((v) => {\n      return (url + \"\").startsWith(v);\n    }) != -1\n  ) {\n    return url;\n  }\n  return \"/\";\n}\n\nexport const action = async ({ request }: ActionArgs) => {\n  const form = await request.formData();\n  const loginType = form.get(\"loginType\");\n  const username = form.get(\"username\");\n  const password = form.get(\"password\");\n  const redirectTo = validateUrl(form.get(\"redirectTo\") || \"/\");\n  if (\n    typeof loginType !== \"string\" ||\n    typeof username !== \"string\" ||\n    typeof password !== \"string\" ||\n    typeof redirectTo !== \"string\"\n  ) {\n    return badRequest({\n      fieldErrors: null,\n      fields: null,\n      formError: `Form not submitted correctly.`,\n    });\n  }\n\n  const fields = { loginType, username, password };\n  const fieldErrors = {\n    username: validateUsername(username),\n    password: validatePassword(password),\n  };\n  if (Object.values(fieldErrors).some(Boolean)) {\n    return badRequest({\n      fieldErrors,\n      fields,\n      formError: null,\n    });\n  }\n\n  switch (loginType) {\n    case \"login\": {\n      // login to get the user\n      // if there's no user, return the fields and a formError\n      // if there is a user, create their session and redirect to /\n      const user = await login({ username, password });\n      if (!user) {\n        return badRequest({\n          fieldErrors: null,\n          fields,\n          formError: `Username/Password combination is incorrect`,\n        });\n      }\n\n      return createUserSession(user.id, redirectTo);\n    }\n    case \"register\": {\n      const userExists = await db.user.findFirst({\n        where: { username },\n      });\n      if (userExists) {\n        return badRequest({\n          fieldErrors: null,\n          fields,\n          formError: `User with username ${username} already exists`,\n        });\n      }\n      // create the user\n      // create their session and redirect to /\n      const user = await register({ username, password });\n      if (!user) {\n        return badRequest({\n          fieldErrors: null,\n          fields,\n          formError: `Something went wrong trying to create a new user.`,\n        });\n      }\n      return createUserSession(user.id, redirectTo);\n    }\n    default: {\n      return badRequest({\n        fieldErrors: null,\n        fields,\n        formError: `Login type invalid`,\n      });\n    }\n  }\n};\n\nexport default function Login() {\n  const actionData = useActionData<typeof action>();\n  const [searchParams] = useSearchParams();\n\n  return (\n    <div className=\"background-wrapper\">\n      <section className=\"container login-content\">\n        <div className=\"content\">\n          <h1>Sign in to Your Account</h1>\n          <form method=\"post\">\n            <input type=\"hidden\" name=\"loginType\" value=\"login\" />\n            <input\n              type=\"hidden\"\n              name=\"redirectTo\"\n              value={searchParams.get(\"redirectTo\") ?? undefined}\n            />\n            <div className=\"login-field username\">\n              <label htmlFor=\"username-input\">Username</label>\n              <input\n                type=\"text\"\n                autoFocus\n                id=\"username-input\"\n                name=\"username\"\n                defaultValue={actionData?.fields?.username}\n                aria-invalid={Boolean(actionData?.fieldErrors?.username)}\n                aria-errormessage={\n                  actionData?.fieldErrors?.username\n                    ? \"username-error\"\n                    : undefined\n                }\n              />\n              {actionData?.fieldErrors?.username ? (\n                <p\n                  className=\"form-validation-error\"\n                  role=\"alert\"\n                  id=\"username-error\"\n                >\n                  {actionData.fieldErrors.username}\n                </p>\n              ) : null}\n            </div>\n            <div className=\"login-field password\">\n              <label htmlFor=\"password-input\">Password</label>\n              <input\n                id=\"password-input\"\n                name=\"password\"\n                type=\"password\"\n                defaultValue={actionData?.fields?.password}\n                aria-invalid={Boolean(actionData?.fieldErrors?.password)}\n                aria-errormessage={\n                  actionData?.fieldErrors?.password\n                    ? \"password-error\"\n                    : undefined\n                }\n              />\n              {actionData?.fieldErrors?.password ? (\n                <p\n                  className=\"form-validation-error\"\n                  role=\"alert\"\n                  id=\"password-error\"\n                >\n                  {actionData.fieldErrors.password}\n                </p>\n              ) : null}\n            </div>\n            <div id=\"form-error-message\">\n              {actionData?.formError ? (\n                <p className=\"form-validation-error\" role=\"alert\">\n                  {actionData.formError}\n                </p>\n              ) : null}\n            </div>\n            <button type=\"submit\" className=\"button\">\n              Submit\n            </button>\n          </form>\n        </div>\n      </section>\n      <aside className=\"login-aside\"></aside>\n    </div>\n  );\n}\n", "import { json } from \"@remix-run/node\";\n\n/**\n * This helper function helps us returning the accurate HTTP status,\n * 400 Bad Request, to the client.\n */\nexport const badRequest = <T>(data: T) =>\n  json<T>(data, { status: 400 });", "export default {'version':'0c943597','entry':{'module':'/build/entry.client-QC3RJXW4.js','imports':['/build/_shared/chunk-SZTH422T.js','/build/_shared/chunk-DF3EUDCN.js']},'routes':{'root':{'id':'root','parentId':undefined,'path':'','index':undefined,'caseSensitive':undefined,'module':'/build/root-5AJCBSGT.js','imports':['/build/_shared/chunk-JNKTGLQ6.js','/build/_shared/chunk-JCRALK6Z.js'],'hasAction':true,'hasLoader':false,'hasCatchBoundary':true,'hasErrorBoundary':false},'routes/__index':{'id':'routes/__index','parentId':'root','path':undefined,'index':undefined,'caseSensitive':undefined,'module':'/build/routes/__index-3DNUT5A4.js','imports':['/build/_shared/chunk-N4GJFGYA.js','/build/_shared/chunk-XCSNGQWA.js','/build/_shared/chunk-UEO7475F.js'],'hasAction':false,'hasLoader':true,'hasCatchBoundary':false,'hasErrorBoundary':false},'routes/__index/index':{'id':'routes/__index/index','parentId':'routes/__index','path':undefined,'index':true,'caseSensitive':undefined,'module':'/build/routes/__index/index-BLCKDDH7.js','imports':undefined,'hasAction':false,'hasLoader':true,'hasCatchBoundary':false,'hasErrorBoundary':false},'routes/login':{'id':'routes/login','parentId':'root','path':'login','index':undefined,'caseSensitive':undefined,'module':'/build/routes/login-TZI7TBBN.js','imports':['/build/_shared/chunk-UEO7475F.js'],'hasAction':true,'hasLoader':false,'hasCatchBoundary':false,'hasErrorBoundary':false},'routes/logout':{'id':'routes/logout','parentId':'root','path':'logout','index':undefined,'caseSensitive':undefined,'module':'/build/routes/logout-CG5UQZAS.js','imports':undefined,'hasAction':true,'hasLoader':true,'hasCatchBoundary':false,'hasErrorBoundary':false},'routes/solo/$roomId':{'id':'routes/solo/$roomId','parentId':'root','path':'solo/:roomId','index':undefined,'caseSensitive':undefined,'module':'/build/routes/solo/$roomId-P3URMZ4B.js','imports':['/build/_shared/chunk-N4GJFGYA.js','/build/_shared/chunk-XCSNGQWA.js','/build/_shared/chunk-UEO7475F.js'],'hasAction':true,'hasLoader':true,'hasCatchBoundary':false,'hasErrorBoundary':false}},'url':'/build/manifest-0C943597.js'};", "\nimport * as entryServer from \"./entry.server.tsx\";\nimport * as route0 from \"./root.tsx\";\nimport * as route1 from \"./routes/solo/$roomId.tsx\";\nimport * as route2 from \"./routes/__index.tsx\";\nimport * as route3 from \"./routes/__index/index.tsx\";\nimport * as route4 from \"./routes/logout.tsx\";\nimport * as route5 from \"./routes/login.tsx\";\n  export { default as assets } from \"@remix-run/dev/assets-manifest\";\n  export const assetsBuildDirectory = \"public/build\";\n  export const future = {\"v2_meta\":false};\n  export const publicPath = \"/build/\";\n  export const entry = { module: entryServer };\n  export const routes = {\n    \"root\": {\n      id: \"root\",\n      parentId: undefined,\n      path: \"\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route0\n    },\n  \"routes/solo/$roomId\": {\n      id: \"routes/solo/$roomId\",\n      parentId: \"root\",\n      path: \"solo/:roomId\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route1\n    },\n  \"routes/__index\": {\n      id: \"routes/__index\",\n      parentId: \"root\",\n      path: undefined,\n      index: undefined,\n      caseSensitive: undefined,\n      module: route2\n    },\n  \"routes/__index/index\": {\n      id: \"routes/__index/index\",\n      parentId: \"routes/__index\",\n      path: undefined,\n      index: true,\n      caseSensitive: undefined,\n      module: route3\n    },\n  \"routes/logout\": {\n      id: \"routes/logout\",\n      parentId: \"root\",\n      path: \"logout\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route4\n    },\n  \"routes/login\": {\n      id: \"routes/login\",\n      parentId: \"root\",\n      path: \"login\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route5\n    }\n  };"],
  "mappings": "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",
  "names": ["isbot", "import_react", "import_react", "import_jsx_dev_runtime", "import_react", "import_jsx_dev_runtime", "import_node", "import_jsx_dev_runtime", "socket", "io", "action", "links", "import_node", "import_react", "import_react", "context", "import_react", "import_jsx_dev_runtime", "import_jsx_dev_runtime", "import_jsx_dev_runtime", "isMatchCell", "isUserCell", "import_react", "import_react", "import_jsx_dev_runtime", "import_jsx_dev_runtime", "debounce", "curUser", "import_react", "import_node", "bcrypt", "import_jsx_dev_runtime", "links", "action", "loader", "import_node", "import_react", "import_react", "import_jsx_dev_runtime", "BoardGame", "import_react", "import_jsx_dev_runtime", "import_react", "import_react", "import_jsx_dev_runtime", "import_jsx_dev_runtime", "loader", "index_exports", "loader", "import_node", "import_react", "import_jsx_dev_runtime", "import_jsx_dev_runtime", "loader", "action", "loader", "import_node", "action", "loader", "action", "links", "import_react", "import_node", "import_jsx_dev_runtime", "links", "action", "index_exports"]
}
